Create an index to enable quick retrieval of orders grouped by date:
CREATE INDEX idx_orders_date ON Orders (OrderDate);

If the Orders table has already been created, you can add a unique constraint to the onum field like this:
ALTER TABLE Orders ADD CONSTRAINT unique_onum UNIQUE (onum);

Create an index to permit each salesperson to retrieve his or her orders grouped by date quickly:
CREATE INDEX idx_salesperson_orders ON Orders (SalespersonID, OrderDate);

To enforce that each salesperson has only one customer of a given rating, you can use a combination of constraints and triggers: First, add a unique constraint on the combination of SalespersonID and Rating in the Customers table:
ALTER TABLE Customers ADD CONSTRAINT unique_salesperson_rating UNIQUE (SalespersonID, Rating);

CREATE OR REPLACE FUNCTION enforce_unique_salesperson_rating()
RETURNS TRIGGER AS
$$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM Customers
        WHERE SalespersonID = NEW.SalespersonID
          AND Rating = NEW.Rating
          AND CustomerID != NEW.CustomerID
    ) THEN
        RAISE EXCEPTION 'A customer with the same rating already exists for this salesperson.';
    END IF;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER trigger_enforce_unique_salesperson_rating
BEFORE INSERT OR UPDATE ON Customers
FOR EACH ROW
EXECUTE FUNCTION enforce_unique_salesperson_rating();
