1) Give Amit the right to change the ratings of the customers:
GRANT UPDATE ON Customers TO Amit;

2) Give Manoj the right to give other users the right to query the Orders table:
GRANT SELECT ON Orders TO Manoj WITH GRANT OPTION;

3) Take the INSERT privilege on Salespeople away from Ajita:
REVOKE INSERT ON Salespeople FROM Ajita;

4) Grant Abhijeet the right to insert or update the Customers table while keeping her possible rating values in the range of 100 to 500:
GRANT INSERT, UPDATE ON Customers TO Abhijeet;
CREATE OR REPLACE FUNCTION check_rating_range()
RETURNS TRIGGER AS
$$
BEGIN
    IF NEW.Rating < 100 OR NEW.Rating > 500 THEN
        RAISE EXCEPTION 'Rating must be between 100 and 500.';
    END IF;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER trigger_check_rating_range
BEFORE INSERT OR UPDATE ON Customers
FOR EACH ROW
EXECUTE FUNCTION check_rating_range();

5) Allow Vikram to query the Customers table, but restrict his access to those customers whose rating is the lowest:
CREATE ROLE LowestRatingUser;
GRANT SELECT ON Customers TO LowestRatingUser;
CREATE OR REPLACE FUNCTION check_lowest_rating_access()
RETURNS TRIGGER AS
$$
BEGIN
    IF NEW.Rating != (SELECT MIN(Rating) FROM Customers) THEN
        RAISE EXCEPTION 'Access denied to customers with rating different from the lowest.';
    END IF;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER trigger_check_lowest_rating_access
BEFORE INSERT OR UPDATE ON Customers
FOR EACH ROW
EXECUTE FUNCTION check_lowest_rating_access();

GRANT LowestRatingUser TO Vikram;
